name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Gradle build
        run: ./gradlew build

      - name: Copy Jar file
        run: |
          mv build/libs/TMPS-0.0.1.jar TMPS.jar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-file
          path: TMPS.jar

  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: jar-file
          path: TMPS.jar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY_NAME }}:latest

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      - uses: actions/checkout@v3

      - name: Add Server key
        run: |
          touch key.txt && echo "${{ secrets.SERVER_SSH_KEY }}" > key.txt
          chmod 600 key.txt

      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP_ADDRESS }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY_NAME }}:latest
            CONTAINER_NAME=${{ secrets.DOCKERHUB_REPOSITORY_NAME }}
            if [ "$(docker ps -qa -f name=$CONTAINER_NAME)" ]; then
                if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                    echo "Container is running -> stopping it..."
                    docker stop $CONTAINER_NAME;
                fi
            fi
            echo "Run docker container..."

            docker run --detach --rm --name ${{ secrets.DOCKERHUB_REPOSITORY_NAME }} -p 8082:8082 -v /TMPS/logs:/logs ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY_NAME }}:latest --SERVER_PORT=${{ secrets.APP_SERVER_PORT }} --SPRING_DATASOURCE_URL=jdbc:postgresql://${{ secrets.DATABASE_URL }} --SPRING_DATASOURCE_USERNAME=${{ secrets.DATABASE_USERNAME }} --SPRING_DATASOURCE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} --TELEGRAM_BOT_NAME=${{ secrets.TELEGRAM_BOT_NAME }} --TELEGRAM_BOT_ID=${{ secrets.TELEGRAM_BOT_ID }} --TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} --POSTING_DELAY=60000

            exit